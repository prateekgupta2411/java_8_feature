package Static_Method_In_Interface;
//
//Overriding ‡§ï‡§¨ ‡§π‡•ã‡§ó‡•Ä?
//
//Overriding ‡§§‡§≠‡•Ä ‡§π‡•ã‡§ó‡•Ä ‡§ú‡§¨:
//        ‚úÖ Parent class ‡§Æ‡•á‡§Ç non-static (instance) method ‡§π‡•ã‡•§
//        ‚úÖ Child class ‡§Æ‡•á‡§Ç ‡§µ‡§π‡•Ä method same signature ‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡•ã‡•§
//        ‚úÖ Method ‡§ï‡•ã @Override annotation ‡§∏‡•á mark ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç (optional but recommended)‡•§
//        ‚úÖ Static methods ‡§ï‡§≠‡•Ä override ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡•Ä‡§Ç, ‡§∏‡§ø‡§∞‡•ç‡§´ instance methods ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡§Ç‡•§

//üî¥ Overriding ‡§ï‡§¨ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§ó‡•Ä? (Common Mistakes)
//Case	Overriding ‡§π‡•ã‡§ó‡•Ä?	Reason
//Static method ‡§ï‡•ã override ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂	‚ùå ‡§®‡§π‡•Ä‡§Ç	‡§Ø‡§π method hiding ‡§ï‡§π‡§≤‡§æ‡§§‡§æ ‡§π‡•à
//Private method ‡§ï‡•ã override ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂	‚ùå ‡§®‡§π‡•Ä‡§Ç	Private methods inherited ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡•Ä‡§Ç
//Final method ‡§ï‡•ã override ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂	‚ùå ‡§®‡§π‡•Ä‡§Ç	Final method ‡§ï‡•ã override ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á
//Constructor ‡§ï‡•ã override ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂	‚ùå ‡§®‡§π‡•Ä‡§Ç	Constructor ‡§ï‡§≠‡•Ä override ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡•á
//Parent method ‡§ï‡•ã child class ‡§Æ‡•á‡§Ç ‡§ï‡§Æ restrictive access ‡§¶‡•á‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ (Protected ‚Üí Private)	‚ùå ‡§®‡§π‡•Ä‡§Ç	Overriding ‡§Æ‡•á‡§Ç access modifier ‡§ï‡•ã ‡§ï‡§Æ restrictive ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á

class Parent {
    public void show() {   // Non-static method
        System.out.println("Parent show()");
    }
}
class Child extends Parent {
    @Override
    public void show() {  // Overriding the method
        super.show();  // Parent class method call
        System.out.println("Child show()");
    }
}
public class Example_of_Overriding {

    public static void main(String[] args) {
        Parent obj = new Child(); // Dynamic method dispatch
        obj.show();  // Output: Child show()
    }
}
